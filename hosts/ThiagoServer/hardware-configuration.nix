# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/618e370d-5bd7-44bd-81ed-fa9942414e0a";
    fsType = "btrfs";
    options = [
      "compress=zstd:8"
      "subvol=root"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/618e370d-5bd7-44bd-81ed-fa9942414e0a";
    fsType = "btrfs";
    options = [
      "compress=zstd:8"
      "subvol=home"
    ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/618e370d-5bd7-44bd-81ed-fa9942414e0a";
    fsType = "btrfs";
    options = [
      "compress=zstd:8"
      "noatime"
      "subvol=nix"
    ];
  };

  fileSystems."/home/thiago/data" = {
    device = "/dev/disk/by-uuid/efce4027-8234-47f0-b35c-ec43d5ada034";
    fsType = "btrfs";
    options = [
      "compress=zstd:10"
      "subvol=data"
      "autodefrag"
      "nossd"
      "rw"
    ];
  };
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/12CE-A600";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  swapDevices = [
    {device = "/dev/disk/by-uuid/47d3c511-c2ab-4ab1-abd7-ff6d29572753";}
  ];

  boot.kernelPackages = pkgs.linuxPackages_zen;
  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "ahci"
    "usbhid"
    "usb_storage"
    "sd_mod"
    "rtsx_usb_sdmmc"
  ];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];

  boot.modprobeConfig.enable = true;
  boot.extraModprobeConfig = ''
    options i915 enable_guc=3
  '';
  boot.kernelParams = [
    "intal_pstate=active"
  ];
  boot.kernel.sysctl = {
    "kernel.sched_cfs_bandwidth_slice_us" = 3000;
    "vm.max_map_count" = 2147483642;
    "vm.dirty_background_ratio" = 5;
    "fs.file-max" = 2097152;
    "net.ipv4.ip_local_port_range" = "1024 65535";
    "net.ipv4.tcp_fastopen" = 3;
    "net.ipv4.tcp_keepalive_time" = 600;
    "net.ipv4.tcp_keepalive_probes" = 5;
    "net.ipv4.tcp_keepalive_intvl" = 15;
    "net.ipv4.ip_forward" = 0;
    "net.ipv4.tcp_syncookies" = 1;
    "net.ipv4.icmp_echo_ignore_broadcasts" = 1;

    # Increase Linux autotuning TCP buffer limits
    # Set max to 16MB for 1GE and 32M (33554432) or 54M (56623104) for 10GE
    # Don't set tcp_mem itself! Let the kernel scale it based on RAM.
    "net.core.rmem_max" = 16777216;
    "net.core.wmem_max" = 16777216;
    "net.core.rmem_default" = 16777216;
    "net.core.wmem_default" = 16777216;
    "net.core.optmem_max" = 40960;

    # cloudflare uses this for balancing latency and throughput
    # https://blog.cloudflare.com/the-story-of-one-latency-spike/
    ## net.ipv4.tcp_rmem = 4096 1048576 2097152
    "net.ipv4.tcp_rmem" = "4096 5242880 33554432";

    "net.ipv4.tcp_wmem" = "4096 65536 16777216";

    # Also increase the max packet backlog
    "net.core.netdev_max_backlog" = 100000;
    ## net.core.netdev_budget= 50000;
    "net.core.netdev_budget" = 60000;
    "net.core.netdev_budget_usecs" = 6000;

    # Make room for more TIME_WAIT sockets due to more clients,
    # and allow them to be reused if we run out of sockets
    "net.ipv4.tcp_max_syn_backlog" = 30000;
    "net.ipv4.tcp_max_tw_buckets" = 2000000;
    "net.ipv4.tcp_tw_reuse" = 1;
    "net.ipv4.tcp_fin_timeout" = 10;

    # Disable TCP slow start on idle connections
    "net.ipv4.tcp_slow_start_after_idle" = 0;

    # If your servers talk UDP, also up these limits
    "net.ipv4.udp_rmem_min" = 8192;
    "net.ipv4.udp_wmem_min" = 8192;
  };

  services.logind.lidSwitch = "ignore";
  services.logind.lidSwitchDocked = "ignore";
  services.logind.extraConfig = "HandleLidSwitch=ignore";
  #nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

  nix.settings.system-features = [
    "nixos-test"
    "benchmark"
    "big-parallel"
    "gccarch-skylake"
    "gcctune-skylake"
  ];
  nixpkgs = {
    config = {
      allowUnfree = true;
    };
    hostPlatform = {
      system = "x86_64-linux";
      config = "x86_64-unknown-linux-gnu";
    };
  };

  hardware = {
    enableAllFirmware = true;
    graphics = {
      enable = true;
      enable32Bit = true;
      extraPackages = with pkgs; [
        intel-media-driver
        intel-vaapi-driver
        #vaapiVdpau
        intel-compute-runtime # OpenCL filter support (hardware tonemapping and subtitle burn-in)
        vpl-gpu-rt # QSV on 11th gen or newer
        intel-media-sdk # QSV up to 11th gen
      ];
    };
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  };
}
